Uncaught TypeError: Cannot read properties of null (reading 'appendChild')
Context
https://www.instagram.com/stories/colincarrier/?r=1
Stack Trace
content.js:373 (anonymous function)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
// Storylister Chrome Extension - UI Layer
// This script renders the exact UI from mock-instagram and reads data from localStorage

(function() {
  console.log('[Storylister] Initializing extension UI');
  
  // State management
  let isActive = false;
  let rightRail = null;
  let viewers = new Map();
  let currentStory = 0;
  let currentFilters = {
    query: '',
    type: 'all',
    sort: 'recent',
    showTagged: false
  };
  let taggedUsers = new Set();
  let isProMode = false;
  
  // Custom tags for Pro mode
  const customTags = [
    { id: 'crush', emoji: '‚ù§Ô∏è', label: 'Crush' },
    { id: 'cop', emoji: 'üëÆ‚Äç‚ôÇÔ∏è', label: 'Cop' },
    { id: 'friend', emoji: 'üëØ', label: 'Friend' },
    { id: 'coworker', emoji: 'üíº', label: 'Coworker' }
  ];
  
  // Load tagged users from localStorage
  function loadTaggedUsers() {
    try {
      const stored = localStorage.getItem('storylister_tagged_users');
      taggedUsers = stored ? new Set(JSON.parse(stored)) : new Set();
    } catch (e) {
      taggedUsers = new Set();
    }
  }
  
  // Save tagged users to localStorage
  function saveTaggedUsers() {
    localStorage.setItem('storylister_tagged_users', JSON.stringify(Array.from(taggedUsers)));
  }
  
  // Inject the network interceptor
  function injectInterceptor() {
    const script = document.createElement('script');
    script.src = chrome.runtime.getURL('injected.js');
    script.onload = function() {
      this.remove();
    };
    (document.head || document.documentElement).appendChild(script);
    console.log('[Storylister] Injected network interceptor');
  }
  
  // Format time ago
  function formatTimeAgo(timestamp) {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'just now';
  }
  
  // Get filtered viewers
  function getFilteredViewers() {
    let filteredViewers = Array.from(viewers.values());

    // Apply text search
    if (currentFilters.query) {
      const query = currentFilters.query.toLowerCase();
      filteredViewers = filteredViewers.filter(viewer => 
        viewer.username.toLowerCase().includes(query) ||
        viewer.displayName.toLowerCase().includes(query)
      );
    }

    // Apply type filter
    switch (currentFilters.type) {
      case 'followers':
        filteredViewers = filteredViewers.filter(v => v.isFollower);
        break;
      case 'non-followers':
        filteredViewers = filteredViewers.filter(v => !v.isFollower);
        break;
      case 'following':
        filteredViewers = filteredViewers.filter(v => v.isFollowing);
        break;
      case 'verified':
        filteredViewers = filteredViewers.filter(v => v.isVerified);
        break;
    }

    // Apply tag filter
    if (currentFilters.showTagged) {
      filteredViewers = filteredViewers.filter(v => v.isTagged);
    }

    // Apply sorting
    if (currentFilters.sort === 'oldest') {
      filteredViewers.sort((a, b) => a.viewedAt - b.viewedAt);
    } else {
      filteredViewers.sort((a, b) => b.viewedAt - a.viewedAt);
    }

    return filteredViewers;
  }
  
  // Load viewers from localStorage
  function loadViewersFromStorage() {
    try {
      // Load from panel_story_store
      const storyStore = localStorage.getItem('panel_story_store');
      if (storyStore) {
        const parsed = JSON.parse(storyStore);
        const storyId = Object.keys(parsed)[0]; // Get first story
        
        if (storyId && parsed[storyId] && parsed[storyId].viewers) {
          viewers.clear();
          
          parsed[storyId].viewers.forEach(([id, viewer]) => {
            viewers.set(viewer.username, {
              username: viewer.username,
              displayName: viewer.full_name || viewer.username,
              profilePic: viewer.profile_pic_url || `https://i.pravatar.cc/150?u=${viewer.username}`,
              isVerified: viewer.is_verified || false,
              isFollower: viewer.followed_by_viewer || false,
              isFollowing: viewer.follows_viewer || false,
              isTagged: taggedUsers.has(viewer.username),
              viewedAt: viewer.timestamp || Date.now()
            });
          });
          
          console.log(`[Storylister] Loaded ${viewers.size} viewers from localStorage`);
        }
      }
      
      // Load from panel_viewer_cache as fallback
      if (viewers.size === 0) {
        const viewerCache = localStorage.getItem('panel_viewer_cache');
        if (viewerCache) {
          const cached = JSON.parse(viewerCache);
          Object.entries(cached).forEach(([username, viewer]) => {
            viewers.set(username, {
              username: username,
              displayName: viewer.full_name || viewer.displayName || username,
              profilePic: viewer.profile_pic_url || `https://i.pravatar.cc/150?u=${username}`,
              isVerified: viewer.is_verified || false,
              isFollower: viewer.followed_by_viewer || viewer.isFollower || false,
              isFollowing: viewer.follows_viewer || viewer.isFollowing || false,
              isTagged: taggedUsers.has(username),
              viewedAt: viewer.timestamp || Date.now()
            });
          });
          console.log(`[Storylister] Loaded ${viewers.size} viewers from cache`);
        }
      }
    } catch (e) {
      console.error('[Storylister] Error loading viewers:', e);
    }
  }
  
  // Toggle tag
  function toggleTag(username) {
    if (taggedUsers.has(username)) {
      taggedUsers.delete(username);
    } else {
      taggedUsers.add(username);
    }
    saveTaggedUsers();
    
    // Update viewer
    const viewer = viewers.get(username);
    if (viewer) {
      viewer.isTagged = taggedUsers.has(username);
    }
    
    updateViewerList();
  }
  
  // Export data
  function exportData() {
    const data = getFilteredViewers().map(v => ({
      username: v.username,
      displayName: v.displayName,
      isVerified: v.isVerified,
      isFollower: v.isFollower,
      isTagged: v.isTagged,
      viewedAt: new Date(v.viewedAt).toISOString(),
      story: currentStory + 1
    }));
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `storylister_export_${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  }
  
  // Update viewer list UI
  function updateViewerList() {
    const listElement = document.getElementById('sl-list');
    if (!listElement) return;
    
    const filteredViewers = getFilteredViewers();
    
    // Update stats
    const totalViewers = viewers.size;
    const totalVerified = Array.from(viewers.values()).filter(v => v.isVerified).length;
    const taggedInCurrentStory = Array.from(viewers.values()).filter(v => v.isTagged).length;
    
    document.getElementById('sl-viewer-count').textContent = totalViewers;
    document.getElementById('sl-verified-count').textContent = totalVerified;
    document.getElementById('sl-tagged-count').textContent = `${taggedInCurrentStory}/${taggedUsers.size}`;
    document.getElementById('sl-filtered-count').textContent = `${filteredViewers.length} viewers found`;
    
    // Clear and rebuild list
    listElement.innerHTML = '';
    
    if (filteredViewers.length === 0) {
      listElement.innerHTML = `
        <div class="storylister-empty">
          <div class="storylister-empty-icon">üëÅÔ∏è</div>
          <div class="storylister-empty-text">No viewers found</div>
        </div>
      `;
      return;
    }
    
    filteredViewers.forEach(viewer => {
      const viewerEl = document.createElement('div');
      viewerEl.className = 'storylister-viewer-item';
      viewerEl.innerHTML = `
        <div class="storylister-viewer-avatar" data-username="${viewer.username}">
          <img src="${viewer.profilePic}" alt="${viewer.username}">
        </div>
        <div class="storylister-viewer-info">
          <div class="storylister-viewer-username" data-username="${viewer.username}">
            ${viewer.username}
            ${viewer.isVerified ? '<svg width="14" height="14" viewBox="0 0 24 24" fill="#1877F2" style="display: inline; vertical-align: middle; margin-left: 4px;"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>' : ''}
          </div>
          <div class="storylister-viewer-meta">
            ${viewer.displayName} ¬∑ ${formatTimeAgo(viewer.viewedAt)}
          </div>
        </div>
        <div class="storylister-viewer-tags">
          ${!isProMode ? `
            <button class="storylister-tag ${viewer.isTagged ? 'active' : ''}" data-username="${viewer.username}">
              üëÄ
            </button>
          ` : `
            <select class="storylister-tag-dropdown" data-username="${viewer.username}">
              <option value="">No tag</option>
              ${customTags.map(tag => 
                `<option value="${tag.id}" ${viewer.isTagged ? 'selected' : ''}>${tag.emoji} ${tag.label}</option>`
              ).join('')}
            </select>
          `}
        </div>
      `;
      listElement.appendChild(viewerEl);
    });
  }
  
  // Create the right rail UI
  function createRightRail() {
    const rail = document.createElement('div');
    rail.id = 'storylister-right-rail';
    rail.innerHTML = `
      <div class="storylister-panel">
        <div class="storylister-content">
          <div class="storylister-header">
            <div class="storylister-logo">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              <span>Storylister</span>
            </div>
            <div class="storylister-header-actions">
              <button id="sl-pro-toggle" class="storylister-pro-toggle">
                ${isProMode ? 'Pro' : 'Free'}
              </button>
              <button id="sl-close" class="storylister-close">√ó</button>
            </div>
          </div>
          
          <div class="storylister-story-section">
            <div class="storylister-story-indicator">
              Analyzing Story
            </div>
            <button class="story-insights-btn-small">
              üìä Story to Story Insights
            </button>
          </div>
          
          <div class="storylister-stats-summary">
            <div class="stat-item">
              <span class="stat-label">Viewers</span>
              <span class="stat-value" id="sl-viewer-count">0</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Verified</span>
              <span class="stat-value" id="sl-verified-count">0</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Tagged</span>
              <span class="stat-value" id="sl-tagged-count">0/0</span>
            </div>
          </div>
          
          <div class="storylister-search-section">
            <h3 class="search-title">Search Viewers</h3>
            <div class="storylister-search">
              <input 
                type="text" 
                id="sl-search"
                placeholder="Search by username or name..."
              />
            </div>
          </div>
          
          <div class="storylister-filter-buttons">
            <div class="filter-buttons-main">
              <button class="filter-btn active" data-filter-type="all">All</button>
              <button class="filter-btn" data-filter-type="verified">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="#1877F2" style="display: inline; vertical-align: middle;">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
                Verified
              </button>
              <button class="filter-btn" data-filter-tagged="true">
                üëÄ Tagged
              </button>
            </div>
            <div class="filter-buttons-secondary">
              <button class="filter-btn-small" data-filter-type="following">Following</button>
              <button class="filter-btn-small" data-filter-type="followers">Followers</button>
              <button class="filter-btn-small" data-filter-type="non-followers">Non-followers</button>
            </div>
          </div>
          
          <div class="storylister-stats">
            <span class="viewer-count" id="sl-filtered-count">0 viewers found</span>
            <button id="sl-sort" class="sort-toggle-btn">‚Üì Newest</button>
          </div>
          
          <div class="storylister-results" id="sl-list">
            <!-- Viewer list will be populated here -->
          </div>
          
          <div class="storylister-bottom-sections">
            <div class="bottom-section">
              <button class="storylister-manage-tags">
                üè∑Ô∏è Manage Tags
              </button>
            </div>
            <div class="bottom-section">
              <button class="export-track-btn" id="sl-export">
                üíæ Export & Track
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(rail);
    return rail;
  }
  
  // Show right rail